@inproceedings{Ge2018a,
  title = {No {{Security Without Time Protection}}: {{We Need}} a {{New Hardware-Software Contract}}},
  booktitle = {9th {{Asia-Pacific Workshop}} on {{Systems}} ({{APSys}}'18)},
  author = {Ge, Qian and Yarom, Yuval and Heiser, Gernot},
  year = {2018},
  pages = {1--9},
  publisher = {{ACM Press}},
  address = {{Jeju Island, Republic of Korea}},
  doi = {10.1145/3265723.3265724},
  url = {http://dl.acm.org/citation.cfm?doid=3265723.3265724},
  isbn = {978-1-4503-6006-7},
  keywords = {BTB,Covert Channel,ISA,L1D,L1I,Shared Resources,Side-Channel,Timing},
  file = {/home/escou64/Zotero escou64/storage/DG726TAD/Ge et al. - 2018 - No Security Without Time Protection We Need a New.pdf}
}

@inproceedings{Koch2019,
  title = {Spectre {{Attacks}}: {{Exploiting Speculative Execution}}},
  shorttitle = {Spectre {{Attacks}}},
  booktitle = {40th {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{S}}\&{{P}}'19)},
  author = {Kocher, Paul and Horn, Jann and Fogh, Anders and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},
  year = {2019},
  month = may,
  pages = {1--19},
  publisher = {{IEEE Computer Society}},
  address = {{Los Alamitos, CA, USA}},
  doi = {10.1109/SP.2019.00002},
  url = {https://meltdownattack.com/},
  abstract = {Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try to guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access the victim's memory and registers, and can perform operations with measurable side effects. Spectre attacks involve inducing a victim to speculatively perform operations that would not occur during correct program execution and which leak the victim's confidential information via a side channel to the adversary. This paper describes practical attacks that combine methodology from side channel attacks, fault attacks, and return-oriented programming that can read arbitrary memory from the victim's process. More broadly, the paper shows that speculative execution implementations violate the security assumptions underpinning numerous software security mechanisms, including operating system process separation, containerization, just-in-time (JIT) compilation, and countermeasures to cache timing and side-channel attacks. These attacks represent a serious threat to actual systems since vulnerable speculative execution capabilities are found in microprocessors from Intel, AMD, and ARM that are used in billions of devices. While makeshift processor-specific countermeasures are possible in some cases, sound solutions will require fixes to processor designs as well as updates to instruction set architectures (ISAs) to give hardware architects and software developers a common understanding as to what computation state CPU implementations are (and are not) permitted to leak.},
  keywords = {Attack,BHT,Branch Prediction,BTB,Microarchitecture,Spectre,Transient Execution},
  note = {There is a note.},
  file = {/home/escou64/Zotero escou64/storage/RMCJC6IL/Kocher et al. - 2019 - Spectre Attacks Exploiting Speculative Execution.pdf}
}

@inproceedings{Lipp2018,
  title = {Meltdown: {{Reading Kernel Memory}} from {{User Space}}},
  booktitle = {27th {{USENIX Security Symposium}} ({{USENIX Security}}'18)},
  author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Fogh, Anders and Horn, Jann and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
  year = {2018},
  month = aug,
  pages = {973--990},
  publisher = {{USENIX Association}},
  address = {{Baltimore, MD, USA}},
  url = {https://meltdownattack.com/},
  isbn = {978-1-931971-46-1},
  file = {/home/escou64/Zotero escou64/storage/XK2HH2PB/Lipp et al. - 2018 - Meltdown Reading Kernel Memory from User Space.pdf}
}

@inproceedings{Van2018,
  title = {Foreshadow: {{Extracting}} the Keys to the {{Intel SGX}} Kingdom with Transient out-of-Order Execution},
  booktitle = {27th {{USENIX Security Symposium}} ({{USENIX Security}}'18)},
  author = {Van Bulck, Jo and Minkin, Marina and Weisse, Ofir and Genkin, Daniel and Kasikci, Baris and Piessens, Frank and Silberstein, Mark and Wenisch, Thomas F. and Yarom, Yuval and Strackx, Raoul},
  year = {2018},
  month = aug,
  publisher = {{USENIX Association}},
  file = {/home/escou64/Zotero escou64/storage/YHI4CQ99/Bulck et al. - FORESHADOW Extracting the Keys to the Intel SGX K.pdf}
}

@article{Weis2018,
  title = {Foreshadow-{{NG}}: {{Breaking}} the Virtual Memory Abstraction with Transient out-of-Order Execution},
  author = {Weisse, Ofir and Van Bulck, Jo and Minkin, Marina and Genkin, Daniel and Kasikci, Baris and Piessens, Frank and Silberstein, Mark and Strackx, Raoul and Wenisch, Thomas F. and Yarom, Yuval},
  year = {2018},
  journal = {Technical report},
  file = {/home/escou64/Zotero escou64/storage/J4VKXIYK/Weisse et al. - Foreshadow-NG Breaking the Virtual Memory Abstrac.pdf}
}
